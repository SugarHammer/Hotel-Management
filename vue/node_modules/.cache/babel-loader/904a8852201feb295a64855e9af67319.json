{"remainingRequest":"E:\\GitHub\\smart-hotel\\vue\\node_modules\\babel-loader\\lib\\index.js!E:\\GitHub\\smart-hotel\\vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\GitHub\\smart-hotel\\vue\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!E:\\GitHub\\smart-hotel\\vue\\src\\components\\echarts\\echarts2.vue?vue&type=script&lang=js","dependencies":[{"path":"E:\\GitHub\\smart-hotel\\vue\\src\\components\\echarts\\echarts2.vue","mtime":1653969029000},{"path":"E:\\GitHub\\smart-hotel\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\GitHub\\smart-hotel\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"E:\\GitHub\\smart-hotel\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\GitHub\\smart-hotel\\vue\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCByZXF1ZXN0IGZyb20gIkAvdXRpbHMvcmVxdWVzdCI7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnZWNoYXJ0czInLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4ge307CiAgfSwKICBtZXRob2RzOiB7CiAgICBkcmF3Q2hhcnRzOiBmdW5jdGlvbiBkcmF3Q2hhcnRzKCkgewogICAgICB2YXIgbXlDaGFydCA9IHRoaXMuJHJvb3QuZWNoYXJ0cy5pbml0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuZWNoYXJ0cykpOwogICAgICB2YXIgb3B0aW9uID0gewogICAgICAgIHRpdGxlOiB7CiAgICAgICAgICB0ZXh0OiAn5oql5L+u5Y+N6aaI5q+U5L6L57uf6K6h5Zu+JywKICAgICAgICAgIHN1YnRleHQ6ICfomZrmi5/mlbDmja4nLAogICAgICAgICAgbGVmdDogJ2xlZnQnCiAgICAgICAgfSwKICAgICAgICB0b29sdGlwOiB7CiAgICAgICAgICB0cmlnZ2VyOiAnaXRlbScKICAgICAgICB9LAogICAgICAgIGxlZ2VuZDogewogICAgICAgICAgdHJpZ2dlcjogJ2l0ZW0nLAogICAgICAgICAgb3JpZW50OiAndmVydGljYWwnLAogICAgICAgICAgeDogJ3JpZ2h0JywKICAgICAgICAgIC8v5Y+v6K6+5a6a5Zu+5L6L5Zyo5bem44CB5Y+z44CB5bGF5LitCiAgICAgICAgICB5OiAnY2VudGVyJywKICAgICAgICAgIC8v5Y+v6K6+5a6a5Zu+5L6L5Zyo5LiK44CB5LiL44CB5bGF5LitCiAgICAgICAgICBwYWRkaW5nOiBbMCwgNTAsIDAsIDBdCiAgICAgICAgfSwKICAgICAgICB0b29sYm94OiB7CiAgICAgICAgICBzaG93OiB0cnVlLAogICAgICAgICAgZmVhdHVyZTogewogICAgICAgICAgICBtYXJrOiB7CiAgICAgICAgICAgICAgc2hvdzogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICBkYXRhVmlldzogewogICAgICAgICAgICAgIHNob3c6IHRydWUsCiAgICAgICAgICAgICAgcmVhZE9ubHk6IGZhbHNlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHJlc3RvcmU6IHsKICAgICAgICAgICAgICBzaG93OiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNhdmVBc0ltYWdlOiB7CiAgICAgICAgICAgICAgc2hvdzogdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBzZXJpZXM6IFt7CiAgICAgICAgICBuYW1lOiAn57u05L+u5oOF5Ya1JywKICAgICAgICAgIHR5cGU6ICdwaWUnLAogICAgICAgICAgcmFkaXVzOiBbJzUwJScsICc3MCUnXSwKICAgICAgICAgIGF2b2lkTGFiZWxPdmVybGFwOiBmYWxzZSwKICAgICAgICAgIGxhYmVsOiB7CiAgICAgICAgICAgIG5vcm1hbDogewogICAgICAgICAgICAgIHNob3c6IGZhbHNlLAogICAgICAgICAgICAgIHBvc2l0aW9uOiAnY2VudGVyJwogICAgICAgICAgICB9LAogICAgICAgICAgICBlbXBoYXNpczogewogICAgICAgICAgICAgIHNob3c6IHRydWUsCiAgICAgICAgICAgICAgdGV4dFN0eWxlOiB7CiAgICAgICAgICAgICAgICBmb250U2l6ZTogJzMwJywKICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICdib2xkJwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIGxhYmVsTGluZTogewogICAgICAgICAgICBub3JtYWw6IHsKICAgICAgICAgICAgICBzaG93OiBmYWxzZQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgZGF0YTogW10KICAgICAgICB9XQogICAgICB9OwogICAgICByZXF1ZXN0LmdldCgiL2VuZ2luZWVyL2NvdW50IikudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgaWYgKHJlcy5jb2RlID09PSAnMCcpIHsKICAgICAgICAgIHJlcy5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgb3B0aW9uLnNlcmllc1swXS5kYXRhLnB1c2goewogICAgICAgICAgICAgIG5hbWU6IGl0ZW0uc3RhdGUsCiAgICAgICAgICAgICAgdmFsdWU6IGl0ZW0uY291bnQKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsgLy8g57uY5Yi25Zu+6KGoCgogICAgICAgICAgbXlDaGFydC5zZXRPcHRpb24ob3B0aW9uKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIGVjaGFydHM6IGZ1bmN0aW9uIGVjaGFydHMoKSB7CiAgICAgIHJldHVybiAnZWNoYXJ0cycgKyBNYXRoLnJhbmRvbSgpICogMTAwMDAwOwogICAgfQogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHRoaXMuZHJhd0NoYXJ0cygpOwogIH0KfTs="},{"version":3,"sources":["E:\\GitHub\\smart-hotel\\vue\\src\\components\\echarts\\echarts2.vue"],"names":[],"mappings":";AAUA,OAAO,OAAP,MAAoB,iBAApB;AAEE,eAAe;AACb,EAAA,IAAI,EAAC,UADQ;AAEb,EAAA,IAFa,kBAEN;AACL,WAAO,EAAP;AACD,GAJY;AAKb,EAAA,OAAO,EAAE;AACP,IAAA,UADO,wBACM;AACX,UAAI,OAAM,GAAI,KAAK,KAAL,CAAW,OAAX,CAAmB,IAAnB,CAAwB,QAAQ,CAAC,cAAT,CAAwB,KAAK,OAA7B,CAAxB,CAAd;AACA,UAAI,MAAK,GAAI;AACX,QAAA,KAAK,EAAE;AACL,UAAA,IAAI,EAAE,WADD;AAEL,UAAA,OAAO,EAAE,MAFJ;AAGL,UAAA,IAAI,EAAE;AAHD,SADI;AAMX,QAAA,OAAO,EAAE;AACP,UAAA,OAAO,EAAE;AADF,SANE;AASX,QAAA,MAAM,EAAE;AACN,UAAA,OAAO,EAAE,MADH;AAEN,UAAA,MAAM,EAAE,UAFF;AAGN,UAAA,CAAC,EAAC,OAHI;AAGU;AAChB,UAAA,CAAC,EAAC,QAJI;AAIU;AAChB,UAAA,OAAO,EAAC,CAAC,CAAD,EAAG,EAAH,EAAM,CAAN,EAAQ,CAAR;AALF,SATG;AAgBX,QAAA,OAAO,EAAE;AACP,UAAA,IAAI,EAAE,IADC;AAEP,UAAA,OAAO,EAAE;AACL,YAAA,IAAI,EAAE;AAAC,cAAA,IAAI,EAAE;AAAP,aADD;AAEL,YAAA,QAAQ,EAAE;AAAC,cAAA,IAAI,EAAE,IAAP;AAAa,cAAA,QAAQ,EAAE;AAAvB,aAFL;AAGL,YAAA,OAAO,EAAE;AAAC,cAAA,IAAI,EAAE;AAAP,aAHJ;AAIL,YAAA,WAAW,EAAE;AAAC,cAAA,IAAI,EAAE;AAAP;AAJR;AAFF,SAhBE;AAyBX,QAAA,MAAM,EAAE,CACN;AACE,UAAA,IAAI,EAAE,MADR;AAEE,UAAA,IAAI,EAAE,KAFR;AAGE,UAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,KAAR,CAHV;AAIE,UAAA,iBAAiB,EAAE,KAJrB;AAKE,UAAA,KAAK,EAAE;AACL,YAAA,MAAM,EAAE;AACN,cAAA,IAAI,EAAE,KADA;AAEN,cAAA,QAAQ,EAAE;AAFJ,aADH;AAKL,YAAA,QAAQ,EAAE;AACR,cAAA,IAAI,EAAE,IADE;AAER,cAAA,SAAS,EAAE;AACT,gBAAA,QAAQ,EAAE,IADD;AAET,gBAAA,UAAU,EAAE;AAFH;AAFH;AALL,WALT;AAkBE,UAAA,SAAS,EAAE;AACT,YAAA,MAAM,EAAE;AACN,cAAA,IAAI,EAAE;AADA;AADC,WAlBb;AAuBE,UAAA,IAAI,EAAE;AAvBR,SADM;AAzBG,OAAb;AAqDA,MAAA,OAAO,CAAC,GAAR,CAAY,iBAAZ,EAA+B,IAA/B,CAAoC,UAAA,GAAE,EAAK;AAC3C,YAAI,GAAG,CAAC,IAAJ,KAAa,GAAjB,EAAsB;AACpB,UAAA,GAAG,CAAC,IAAJ,CAAS,OAAT,CAAiB,UAAA,IAAG,EAAK;AACvB,YAAA,MAAM,CAAC,MAAP,CAAc,CAAd,EAAiB,IAAjB,CAAsB,IAAtB,CAA2B;AAAC,cAAA,IAAI,EAAE,IAAI,CAAC,KAAZ;AAAmB,cAAA,KAAK,EAAE,IAAI,CAAC;AAA/B,aAA3B;AACD,WAFD,EADoB,CAIpB;;AACA,UAAA,OAAO,CAAC,SAAR,CAAkB,MAAlB;AACF;AACD,OARC;AASF;AAjEO,GALI;AAwEb,EAAA,QAAQ,EAAE;AACR,IAAA,OADQ,qBACE;AACR,aAAO,YAAY,IAAI,CAAC,MAAL,KAAgB,MAAnC;AACF;AAHQ,GAxEG;AA6Eb,EAAA,OA7Ea,qBA6EH;AACR,SAAK,UAAL;AACD;AA/EY,CAAf","sourcesContent":["<!-- echartscom.vue -->\n<template>\n  <div class=\"charttest\">\n    <div :style=\"{width: '700px', height: '400px'}\" :id=\"echarts\" class=\"echarts\" ref=\"echarts\">\n    </div>\n  </div>\n</template>\n\n<script>\n\nimport request from \"@/utils/request\";\n\n  export default {\n    name:'echarts2',\n    data() {\n      return {};\n    },\n    methods: {\n      drawCharts() {\n        let myChart = this.$root.echarts.init(document.getElementById(this.echarts));\n        let option = {\n          title: {\n            text: '报修反馈比例统计图',\n            subtext: '虚拟数据',\n            left: 'left'\n          },\n          tooltip: {\n            trigger: 'item'\n          },\n          legend: {\n            trigger: 'item',\n            orient: 'vertical',\n            x:'right',      //可设定图例在左、右、居中\n            y:'center',     //可设定图例在上、下、居中\n            padding:[0,50,0,0],\n          },\n          toolbox: {\n            show: true,\n            feature: {\n                mark: {show: true},\n                dataView: {show: true, readOnly: false},\n                restore: {show: true},\n                saveAsImage: {show: true}\n            }\n          },\n          series: [\n            {\n              name: '维修情况',\n              type: 'pie',\n              radius: ['50%', '70%'],\n              avoidLabelOverlap: false,\n              label: {\n                normal: {\n                  show: false,\n                  position: 'center'\n                },\n                emphasis: {\n                  show: true,\n                  textStyle: {\n                    fontSize: '30',\n                    fontWeight: 'bold'\n                  }\n                }\n              },\n              labelLine: {\n                normal: {\n                  show: false\n                }\n              },\n              data: []\n            }\n          ]\n        };\n        request.get(\"/engineer/count\").then(res => {\n        if (res.code === '0') {\n          res.data.forEach(item => {\n            option.series[0].data.push({name: item.state, value: item.count})\n          })\n          // 绘制图表\n          myChart.setOption(option);\n        }\n      })\n      }\n    },\n    computed: {\n      echarts() {\n        return 'echarts' + Math.random() * 100000;\n      }\n    },\n    mounted() {\n      this.drawCharts();\n    },\n  };\n</script>\n\n<style></style>"],"sourceRoot":""}]}